---
title: "The Great British Visualisation"
subtitle: "STA/ISS 313 - Spring 2023 - Project 1"
author: "SKAZ"
title-slide-attributes:
  data-background-image: images/29576104-8418001-image-a-7_1592079763441.jpeg
  data-background-size: stretch
  data-slide-number: none
format: revealjs
editor: visual
execute:
  echo: false
---

```{r}
#| label: load-packages
#| include: false
library(tidyverse)
library(bakeoff)
library(lubridate)
library(plotly)
library(magrittr)
library(ggpmisc)
library(dplyr)
library(ggridges)
library(scales)
library(ggimage)
library(png)
library(grid)
library(here)
library(ggrepel)
```

```{r}
#| label: setup
#| include: false

ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr

```

```{r age-data-wrangling }
#| include: false
#| fig.width: 7       
#| fig.asp: 0.618     
#| fig.retina: 3       
#| fig.align: "center" 
#| dpi: 300            

bakers <- bakers |>
  separate(col = first_date_appeared, remove = FALSE, sep = "-", 
           into = "first_year_appeared")

bakers <- bakers |>
  mutate(first_year_appeared = case_when(
    series == 9 ~ "2018",
    series == 10 ~ "2019",
    TRUE ~ first_year_appeared
  ))
bakers <- bakers |>
  mutate(birth_year = as.numeric(first_year_appeared) - age) |>
  mutate(age_generation = case_when(
    birth_year >= 1928 & birth_year <= 1945 ~ "Silent Generation",
    birth_year >= 1946 & birth_year <= 1964 ~ "Baby Boomers",
    birth_year >= 1965 & birth_year <= 1980 ~ "Gen X",
    birth_year >= 1981 & birth_year <= 1996 ~ "Millennials",
    birth_year >= 1997 & birth_year <= 2012 ~ "Gen Z"
  )) |>
  mutate(baker_stats = paste(baker_full, "\n Birth Year:", birth_year, 
                             "\n Age:", age, " \n Hometown:", hometown, 
                             "\n Occupation:", occupation)) |>
  mutate_if(is.numeric, round, digits = 1)
```

## Technical Challenge Ranking and Episode Appearances

```{r Question-1-Plot-1}
          
#| fig.width: 3      
#| fig.asp: 0.618     
#| fig.retina: 3       
#| fig.align: "center" 
#| dpi: 300     

bakers_lm_top <- bakers %>%
  group_by(age_generation) %>%
  nest() %>%
  mutate(Mod = map(data, ~lm(percent_episodes_appeared ~ technical_top3, data = .x))) %>%
  mutate(R2 = map_dbl(Mod, ~round(summary(.x)$r.squared, 3))) 

bakers_lm_bottom <- bakers %>%
  group_by(age_generation) %>%
  nest() %>%
  mutate(Mod = map(data, ~lm(percent_episodes_appeared ~ technical_bottom, data = .x))) %>%
  mutate(R2 = map_dbl(Mod, ~round(summary(.x)$r.squared, 3))) 

plot1 <- ggplot(bakers, aes(x = technical_bottom, 
                            y = percent_episodes_appeared)) +
  geom_smooth(aes(color = "# of Bottom 3 Appearances"),
              se = FALSE, method = "lm") +
  geom_smooth(aes(x = technical_top3, color = "# of Top 3 Appearances"),
              se = FALSE, method = "lm") +
  geom_point(shape = 1, color = "#D56065", aes(text = baker_stats)) +
  geom_point(aes(x = technical_top3, text = baker_stats), shape = 16,
             color = "#4A55A4") +
  geom_rug(sides = "r", alpha = 0.2) +
  facet_wrap(~ factor(age_generation, levels = c("Baby Boomers", "Gen X", 
                                                 "Millennials",
                                                 "Silent Generation",
                                                 "Gen Z"))) +
  labs(
    y = "Percentage of Episodes Appeared In",
    x = "Number of Times Appearing in Technial Top or Bottom 3",
    title =
      "Episode Appearances vs. Technical Challenge Ranking Frequency",
    subtitle = "By Age Generation of Bakers from Great British Baking Show"
  ) +
    geom_text(x=2, y=110, aes(label = paste("R2 =", R2)),
              data = bakers_lm_top, color = "#4A55A4", size = 3) +
    geom_text(x=6, y=35, aes(label = paste("R2 =", R2)),
              data = bakers_lm_bottom, color = "#D56065", size = 3) +
  scale_color_manual(
    name = NULL,
    breaks = c("# of Bottom 3 Appearances", "# of Top 3 Appearances"),
    values = c("# of Bottom 3 Appearances" = "#D56065", 
               "# of Top 3 Appearances" = "#4A55A4")
  ) +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  theme_minimal()
ggplotly(plot1) |>
  layout(legend = list(orientation = "v", x = .7, y = 0.15))

```

## Technical Challenge Ranking and Generation

```{r data-wrangling-plot2}
#| fig.width: 7       
#| fig.asp: 0.618     
#| fig.retina: 3       
#| fig.align: "center" 
#| dpi: 300 
#| include: false              

bakers1 <- bakers |>
  pivot_longer(
    cols = c(technical_highest, technical_lowest, technical_median),
    names_to = "score_type"
  ) |>
  mutate(score_type = case_when(
    score_type == "technical_highest" ~ "Highest Ranking",
    score_type == "technical_lowest" ~ "Lowest Ranking",
    score_type == "technical_median" ~ "Median Ranking"
  )) |>
  rename(amount = value) |>
  filter(age_generation != "Silent Generation" & age_generation != "Gen Z")

bakers_meds <- bakers1 |>
  drop_na(amount) |>
  group_by(age_generation, score_type)|>
  summarize(median = median(amount))

```

```{r plot-2}
#| fig.width: 7       
#| fig.asp: 0.618     
#| fig.retina: 3       
#| fig.align: "center" 
#| dpi: 300     
ggplot(data = bakers1, aes(
  x = amount, y = age_generation,
  fill = age_generation
)) +
  geom_boxplot() +
  geom_text(data = bakers_meds, aes(x = median, y = age_generation, label = median, color = age_generation), size = 3, vjust = 5, fontface = "bold") +
  facet_wrap(~factor(score_type, levels = c("Lowest Ranking", "Median Ranking", 
                                                 "Highest Ranking"))) +
  theme(legend.position = "none", plot.caption = element_text(size = 7)) +
  scale_fill_bakeoff(palette = "showstopper") +
  scale_color_bakeoff(palette = "showstopper") +
  labs(
    y = NULL, x = "Technical Challenge Ranking",
    title = "Technical Challenge Rankings by Age Generation", 
    caption = "Gen Z and Silent Generation not included
    due to small sample sizes (n= 4 & n=1 respectively)"
  )

```

## Number of Viewers Across Series

```{r Question-2-Plot-1}
#| fig.width: 7       
#| fig.asp: 0.618     
#| fig.retina: 3       
#| fig.align: "center" 
#| dpi: 300                

ratings_ppl <- ratings |>
  group_by(series)|>
  
  mutate(viewers_7day_mean = mean(viewers_7day)) |>
  mutate(presenters = case_when(
    series <=7 ~ "Sue Perkins & Mel Giedroyc",
    series >=8 & series <=10 ~ "Noel Fielding & Sandi Toksvig"
  ))|>
  mutate(judges = case_when(
    series <= 7 ~ "Paul Hollywood & Mary Berry",
    series >= 8 ~ "Paul Hollywood & Prue Leith"
  )) |>
  mutate(channel = case_when(
    series <= 4 ~ "BBC Two",
    series >4 & series <8 ~ "BBC One", 
    series >= 8 ~ "Channel 4"
  ))

ratings_ppl$presenters <- factor(ratings_ppl$presenters, levels=c("Sue Perkins & Mel Giedroyc", "Noel Fielding & Sandi Toksvig"))

format <- tribble(
  ~box_min, ~box_max, ~color_f,      ~channel_f,
  0,        4.5,        "#005e70",   "BBC Two",
  4.5,        7.5,        "#cb0b0a",   "BBC One",
  7.5,        11,       "#01a7bd",   "Channel 4"
  )


bbc_two <- readPNG(here("images","BBC_Two_logo.png"))
bbc_one <- readPNG(here("images","BBC_One_logo.png"))
channel4 <- readPNG(here("images","Channel_4_logo.png"))

two <- rasterGrob(bbc_two, interpolate=TRUE)
one <- rasterGrob(bbc_one, interpolate=TRUE)
four <- rasterGrob(channel4, interpolate=TRUE)


ggplot(ratings_ppl, aes(x = series, y = viewers_7day_mean))+
  geom_rect(data = format, aes(xmin = box_min, xmax = box_max,ymin = 0, ymax = Inf,fill = color_f, y = NULL, x = NULL))+
  scale_fill_identity()+
  geom_segment(data = ratings_ppl, aes(x = factor(series), xend = factor(series), y = 0, yend = viewers_7day_mean, linetype=judges), color = "white", size = 2)+
  geom_point(data = ratings_ppl, aes(x = factor(series), y = viewers_7day_mean, color = presenters), size = 7)+ 
  annotation_custom(two, xmin=2, xmax=3, ymin=13, ymax=Inf) +
  annotation_custom(one, xmin=5.5, xmax=6.5, ymin=13, ymax=Inf) +
  annotation_custom(four, xmin=8.5, xmax=9.5, ymin=13, ymax=Inf) +
  theme_minimal()+
  scale_color_bakeoff(palette = "showstopper", direction = -1) +
  labs(
    title = "Number of Viewers across Series",
    x = "Series",
    y = "Mean 7 Day Viewership (by millions)",
    fill = "Channels",
    color = "Presenters",
    linetype = "Judges"
  )+
  theme(legend.key = element_rect(fill = "lightgray"))

```

## Viewership throughout Episodes

```{r}
#| fig.width: 7       
#| fig.asp: 0.618     
#| fig.retina: 3       
#| fig.align: "center" 
#| dpi: 300     

new_ratings <-
  ratings |>
  mutate(
    episode = as.factor(episode),
    series = as.factor(series))


new <- new_ratings |>
  mutate(num_series = as.numeric(series)) |>
  mutate(new_series = case_when(
    num_series <= 4 ~ "BBC Two", 
    num_series <= 7 ~ "BBC One", 
    num_series >= 8 ~ "Channel 4"))

new$new_series <- factor(new$new_series, levels=c("BBC Two", "BBC One", "Channel 4"))

median_7day_ep <-
  new |> 
  group_by(episode) |>
  summarize(median = median(viewers_7day)) |>
  mutate(episode=as.numeric(episode))

overall_median <- median(new$viewers_7day)
#next code chunk --> ggplot
```

```{r}
#| fig.width: 7       
#| fig.asp: 0.618     
#| fig.retina: 3       
#| fig.align: "center" 
#| dpi: 300     
ggplot(new) +
  geom_density_ridges_gradient(aes(x=viewers_7day, y=episode, fill=new_series), scale=1, rel_min_height=0.01, show.legend = TRUE) +
  geom_segment(data=median_7day_ep, aes(x=median, xend=median, y=episode, yend=episode+1), color="#A2A6AC", size=2)+
  #scale_fill_bakeoff(palette="showstopper")+
  guides(fill=guide_legend("Channel"))+
  scale_fill_manual(values=c("#005e70", "#cb0b0a", "#01a7bd"))+
scale_x_continuous(breaks = c(0, 5, overall_median, 10, 15),
                   labels = c('0', '5', 'Overall\nMedian', '10', '15')) +
  labs(x= "Viewers (in Millions)",
       y= "Episode Number",
       title= "Ridge densities of number of viewers in 7-day period per episode",
       subtitle= "Split by broadcasting channel",
       caption= "Gray lines represent the median viewership for each episode\n The 10 episode count is not a perfect finale viewership estimate since S1 and S2 only have 6 and 8 episodes each")+
  theme_minimal()


```

